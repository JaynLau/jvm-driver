#	This file is derived from ToolFactory JVM driver.                 
#	                                                                  
#	Hosted at: https://github.com/toolfactory/jvm-driver              
#	                                                                  
#	Modified by: Roberto Gentili                                      
#	                                                                  
#	Modifications hosted at: https://github.com/burningwave/jvm-driver                                                            
#	                                                                                                            
#	- -                                                                                                          
#	                                                                                                            
#	The MIT License (MIT)                                                                                       
#	                                                                                                            
#	Copyright (c) 2019-2021 Luke Hutchison, Roberto Gentili                                                            
#	                                                                                                            
#	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
#	documentation files (the "Software"), to deal in the Software without restriction, including without        
#	limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of   
#	the Software, and to permit persons to whom the Software is furnished to do so, subject to the following    
#	conditions:                                                                                                 
#	                                                                                                            
#	The above copyright notice and this permission notice shall be included in all copies or substantial        
#	portions of the Software.                                                                                   
#	                                                                                                            
#	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT       
#	LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO   
#	EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
#	AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
#	OR OTHER DEALINGS IN THE SOFTWARE.
#
name: Build and release if requested



on:
  push:
    branches:
      - main
    paths:
      - "**.sh"
      - "**.cmd"
      - "**.c"
      - "**.cpp"
      - "**.java"
      - ".github/workflows/**"
      - "**.properties"
      - "**.xml"



jobs:


  elaborate-native-module:
    name: Elaborate native module (${{ matrix.os }} ${{ matrix.architecture }})
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        os: [windows-latest, ubuntu-latest, macOS-latest]
        java: [17]
        architecture: [x86, x64]
        exclude:
          - os: macOS-latest
            architecture: x86
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v2.4.0
        with:
          java-version: ${{ matrix.java }}
          distribution: 'zulu'
          architecture: ${{ matrix.architecture }}
      - if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.architecture, 'x86')
        name: Set up C/C++ compiler
        run: |
          sudo apt update
          sudo apt-get -y install doxygen vera++ zlib1g-dev libsnappy-dev \
            g++-multilib
      - if: startsWith(matrix.os, 'windows-latest') && startsWith(matrix.architecture, 'x86')
        name: Set up C/C++ compiler
        uses: egor-tensin/setup-mingw@v2
        with:
          platform: ${{ matrix.architecture }}
      - uses: actions/checkout@v2
      - name: Build native library
        run: mvn -B clean compile -Dproject_jdk_version=${{ matrix.java }} -DskipTests=true --file ./native/pom.xml
      - if: github.event_name == 'push' && (endsWith(github.event.head_commit.message, 'Releasing new version') || contains(github.event.head_commit.message, 'Generating external artifacts'))
        name: Push native library
        run: |
          git config user.name "${{ github.event.head_commit.committer.name }}"
          git config user.email "${{ github.event.head_commit.committer.email }}"
          git pull origin ${{github.ref}}
          git add .
          git commit -am "Generated native library on ${{ matrix.os }} ${{ matrix.architecture }}" --allow-empty
          git push


  build-and-test-with-standard-JDK:
    name: ${{ matrix.os }} ${{ matrix.architecture }}, JVM ${{ matrix.distribution }} ${{ matrix.java }}
    needs: [elaborate-native-module]
    strategy:
      fail-fast: false
      max-parallel: 15
      matrix:
        architecture: [x86, x64]
        distribution: [zulu]
        os: [ubuntu-latest, macOS-latest, windows-latest]
        java: [9, 10, 11, 12, 13, 14, 15, 16, 17, 18-ea]
        exclude:
          - os: macOS-latest
            architecture: x86
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v2.4.0
        with:
          java-version: ${{ matrix.java }}
          distribution: ${{ matrix.distribution }}
          architecture: ${{ matrix.architecture }}
      - name: Update repositories
        run: |
          git config user.name "${{ github.event.head_commit.committer.name }}"
          git config user.email "${{ github.event.head_commit.committer.email }}"
          git pull origin ${{github.ref}}  
      - name: Build and test with Java 7 target
        run: mvn -B clean test -Dproject_jdk_version=7 -DskipTests=false --file ./java/pom.xml


  build-and-test-with-others-JDK:
    name: ${{ matrix.os }} ${{ matrix.architecture }}, JVM ${{ matrix.distribution }} ${{ matrix.java }}
    needs: [elaborate-native-module]
    strategy:
      fail-fast: false
      max-parallel: 15
      matrix:
        architecture: [x64]
        distribution: [adopt, adopt-openj9, temurin]
        os: [ubuntu-latest, macOS-latest, windows-latest]
        java: [11, 16, 17, 18-ea]
        exclude:
          - distribution: adopt-openj9
            java: 18-ea
          - distribution: adopt
            java: 17
          - distribution: adopt
            java: 18-ea
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v2.4.0
        with:
          java-version: ${{ matrix.java }}
          distribution: ${{ matrix.distribution }}
          architecture: ${{ matrix.architecture }}
      - name: Update repositories
        run: |
          git config user.name "${{ github.event.head_commit.committer.name }}"
          git config user.email "${{ github.event.head_commit.committer.email }}"
          git pull origin ${{github.ref}}  
      - name: Build and test with Java 7 target
        run: mvn -B clean test -Dproject_jdk_version=7 -DskipTests=false --file ./java/pom.xml

